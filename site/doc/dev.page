<page name="page">
	<component name="google-analytics">
		<data>
			<enabled>0</enabled>
			<account>UA-26727070-1</account>
		</data>
	</component>
	<component name="header">
		<data>
			<navigation>
				<page href="/">Home</page>
				<page href="/doc" class="active">Documentation</page>
				<page href="/demo">Demo</page>
				<page href="/screenshots">Screenshots</page>
			</navigation>
		</data>
	</component>

	<component name="body">
		<data>
			<type></type>
		</data>
		<component name="navigation">
			<data>
				<size>side</size>
				<navigation>
					<page href="/doc">Introduction</page>
					<page href="/doc/dev" class="active">For Developers</page>
					<page href="/doc/dev/write-widgets">For PHP Developers</page>
					<page href="/doc/dev/">For JS Developers</page>
				</navigation>
			</data>
		</component>
		<component name="paragraph">
			<data>
				<size>content</size>
				<text><![CDATA[
<h1>So, you call yourself a Developer?</h1>
<p>... good, you will find here some fundamental information about dashboard and widgets.</p>
				]]></text>
			</data>
		</component>
	</component>

	<component name="body">
		<data>
			<type></type>
		</data>
		<component name="paragraph">
			<data>
				<size>side</size>
				<markdown><![CDATA[
## Dashboard

What is it?
				]]></markdown>
			</data>
		</component>
		<component name="paragraph">
			<data>
				<size>content</size>
				<markdown><![CDATA[
This Dashboard system is just a agregator for all your different systems. It's main and only feature is to make it
super easy to collect data from different sources and display it on a single, unified dashboard.

It's writen in PHP and JS, but it allows you to write your widgets in any language you want. You just need to return
JSON object over HTTP or output JSON to a file on disk.
				]]></markdown>
			</data>
		</component>
	</component>

	<component name="body">
		<data>
			<type>highlight</type>
		</data>
		<component name="paragraph">
			<data>
				<size>side</size>
				<markdown><![CDATA[
## Widgets

It's all about widgets here!
				]]></markdown>
			</data>
		</component>
		<component name="paragraph">
			<data>
				<size>content</size>
				<markdown><![CDATA[
### Widget - What is it?

Widget is a simple JSON object which encapsulate all it's properties and data. Each widget is rendered using `template`
property.

This is example JSON representing widget
~~~
{
  tick: 30,
  template: "Hello &#123;{data.name}}! It's &#123;{config.whatTimeIsIt}}'o clock.",
  data: {
    name: "World"
  },
  config: {
    "whatTimeIsIt": "lunch"
  }
}
~~~

There are few special properties used by Dashboard like `tick`, but don't panic and keep reading. You will find
all [Reserved Fields](#reserved-fields) listed on this page.
				]]></markdown>
			</data>
		</component>
	</component>

	<component name="body">
		<data>
			<type></type>
		</data>
		<component name="paragraph">
			<data>
				<size>side</size>
				<markdown><![CDATA[
## How Does it Work?
				]]></markdown>
			</data>
		</component>
		<component name="paragraph">
			<data>
				<size>content</size>
				<markdown><![CDATA[
### Life Cycle

It all starts with config file with a list of widgets. Each widget is loaded and bootstraped (back-end), and added to
WidgetManager (frontend).

WidgetManager starts, renders widgets and from now on it decides when to refresh each widget.

Each widget is as simple JSON object. Hoborg Widgets comes with some default fields, but it's totally up to you how will
it look. No constrains! We recommend to always have at least name and body.

~~~
{
  "name" : "This is My widget"
  "body" : "<span class=\"warn\">I am a widget.</span>",
}
~~~
				]]></markdown>
			</data>
		</component>
	</component>

	<component name="body">
		<data>
			<type>highlight</type>
		</data>
		<component name="paragraph">
			<data>
				<size>side</size>
				<markdown><![CDATA[
## Reserverd Fields {#reserved-fields}
				]]></markdown>
			</data>
		</component>
		<component name="paragraph">
			<data>
				<size>content</size>
				<markdown><![CDATA[
### tick (int|float)

Refresh time for widget.  
Every 'n' seconds a JS callback will fire and refresh given widget.

~~~
{
  "tick": 2.5,
  "template": "last update: &#123;{data.timestamp}}",
  ...
}
~~~





### template

This is the first property that JS widget will look for in the widget's JSON. If it's present, then its value will be 
used as [Mustache](http://mustache.github.io) template, and entire JSON will be used as template data.  
That means that the following widget will simply print its template :)

~~~
{
  "template": "This is my template: &lt;pre>&#123;&#123;{ template }}}&lt;/pre>"
}

// another example
{
  "name": "Awesome Widget",
  "template": "&lt;div class=\"header\">&#123;{name}}&lt;/div>&lt;div class=\"body\">Hi &#123;{data.firstName}}&lt;/div>",
  "data": {
    "firstName": "Bob"
  }
}
~~~





### body (string)

If the `template` is empty or you simply want to render the HTML server side, you can assign it to `body` property.

~~~
{
  "body" : "&lt;span class=\"warn\">We had some technical issues - sorry.&lt;/span>"
}
~~~

The secrete here is in widget default `template` setting which in most cases is `&lt;div class=\"header\">&#123;{name}}
&lt;\/div>&lt;div class=\"body\">{&#123;{body}}}&lt;\/div>&lt;div class=\"footer\">&#123;{footer}}&lt;\/div>"`

If you want you can of course put the html to any other property and output it just like that:
~~~
{
  "myAwesomeHtml": "&lt;b>Hi!&lt;/b>",
  "template": "{&#123;{myAwesomeHtml}}}"
}
~~~





### static (string)

Path to a file with JSON widget object.

In some cases you will find, that it would be great if you could load some default widget JSON from a static file
(generated by some cron job for instance). 
Path to static files MUST be relative to `/widgets` folder. Content of that static file will extend widget JSON.

~~~
{
  "template": "&#123;{data.avg}} &lt;span class="delta delta__&#123;{data.delta-sign}}">&#123;{data.delta}}&lt/span>"
  "static" : "my-widget/autogenerated.json"
}

// ./board/my-board/widgets/my-widget/autogenerated.json
{
  "data": {
    "avg": 145.3,
    "delta": 10.7,
    "delta-sign": "up"
  }
}
~~~

In this example `my-widget/autogenerated.json` is generated by external script and the file itself acts as a very simple
cache layer.

IMPORTANT: `static` files always EXTENDS current widget JSON object.





### url

When specifying url, SimpleDashboard will call that URL and by default widget's json object will be send as a GET parameter widget. You can override httpd method using _method parameter (GET, POST).

Content retrieved from given url will become new body.

~~~
{
  "body" : "<span class=\"warn\">We had some technical issues - sorry.</span>",
  "static" : "error.html",
  "url" : "http://localhost/my-widget.php"
}
~~~


### cgi

CGI field is very similar to url. Main difference is that cgi script MUST return json widget object. Again you can specify _method or use default GET.

~~~
{
  "body" : "<span class=\"warn\">We had some technical issues - sorry.</span>",
  "static" : "error.html",
  "cgi" : "http://localhost/my-widget.cgi"
}
~~~

If CGI address does not begin with https?, SimpleDashboard will assume that you want to execute a local file. In that case your script will get one parameter - the widget's json object.

~~~
{
  "body" : "<span class=\"warn\">We had some technical issues - sorry.</span>",
  "static" : "error.html",
  "cgi" : "/var/www/dashboard/widgets-cgi/my-scrip"
}
~~~

### php

PHP field is used to include given PHP file. Path to PHP files MUST be relative to /widgets folder. Your PHP file needs to return $widget array.

~~~~
{
  "body" : "<span class=\"warn\">We had some technical issues - sorry.</span>",
  "static" : "error.html",
  "php" : "my-widget.php"
}
~~~~

And your PHP script can look like this:

~~~~
&lt;?php
$widget['body'] = 'my body';
return $widget;
~~~~
				]]></markdown>
			</data>
		</component>
	</component>
</page>